substitutions:
  # Must also define in custom.cpp
  devicename: bbq_ctl
  app: bbqapp

esphome:
  name: $devicename
  platform: ESP8266
  board: d1_mini
  includes: 
    - "custom.h"
    - "custom.cpp"

  on_boot:
    then:
      - output.turn_off: counter_clockwise_pin
      - output.turn_on: clockwise_pin
      - output.set_level:
          id: speed_pin
          level: 0.0
      # - output.set_level:
      #     id: pwr_led
      #     level: 1.0
      # - output.turn_on: pwr_led
      - lambda: |-
          on_boot();

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  manual_ip:
    # Set this to the IP of the ESP
    static_ip: 192.168.2.30
    # Set this to the IP address of the router. Often ends with .1
    gateway: 192.168.2.1
    # The subnet of the network. 255.255.255.0 works for most home networks.
    subnet: 255.255.255.0

# Enable logging
logger:
  level: debug

ota:
  password: !secret ota_password

#api:

time:
  # - platform: sntp
  #   id: sntp_time
  #   timezone: "EST+5"
  - platform: sntp
    id: sntp_time
    servers:
      # - time.google.com
      - 1.us.pool.ntp.org 
    # timezone: "EST+5"
    on_time:
      # Every minute
      - seconds: 0
        minutes: /1
        then:
          - logger.log: "on_time minute"
          - lambda: |-
              auto time = sntp_time->now();
              if ( !time.is_valid()) {
                ESP_LOGD("main", "NOT time.is_valid()");
              } else {
                ESP_LOGD("main", "time.is_valid()");
              }

# A housekeeping software sensor
binary_sensor:
  - platform: status
    name: "status"
    retain: false

switch:
  - platform: restart
    name: "restart"
    retain: false


mqtt:
  # Give the mqtt component an ID
  id: mqtt_client  
  broker: !secret mqtt_local_broker
  username: !secret mqtt_username
  password: !secret mqtt_password

  on_message:
    # Deprecated
    - topic: ${devicename}/cmnd/test
      then:
        - lambda: |-
            auto time = sntp_time->now();
            if ( !time.is_valid()) {
              ESP_LOGD("main", "NOT time.is_valid()");
            } else {
              ESP_LOGD("main", "time.is_valid()");
            }
    - topic: ${devicename}/cmnd/set_fan_speed
      then:
        # - lambda: |-
        #     auto time = sntp_time->now();
        #     if ( !time.is_valid()) {
        #       ESP_LOGD("main", "NOT time.is_valid()");
        #     } else {
        #       ESP_LOGD("main", "time.is_valid()");
        #     }
        # - logger.log: "${devicename}/cmnd/set_fan_speed {"
        - logger.log:
            format: "${devicename}/cmnd/set_fan_speed(%s)"
            args: [x.c_str()]
        # - delay: 1s
        - output.turn_on: clockwise_pin
        - lambda: |-
            set_fan_speed(parse_float(x).value());
        # - output.set_level:
        #     id: speed_pin
        #     level: 100%
        - logger.log: "} ${devicename}/cmnd/set_fan_speed"
       # lambda: |-
        #   ESP_LOGD("main", "${devicename}/cmnd/set_fan_speed(%s)", x.c_str());

    - topic: ${devicename}/cmnd/temp_current
      then:
        - logger.log: "at ${devicename}/cmnd/temp_current"
        - lambda: |-
            process_temp_received(parse_float(x).value(), true);

    - topic: ${devicename}/cmnd/reset
      then:
        - logger.log: "at ${devicename}/cmnd/reset"
        - lambda: |-
            reset();

    - topic: ${devicename}/cmnd/send_stat
      then:
        - logger.log: "at ${devicename}/cmnd/send_stat"
        - lambda: |-
            send_properties();

  on_json_message:
    - topic: ${devicename}/cmnd/properties
      then:
        lambda: |-
          ESP_LOGD("main", "${devicename}/cmnd/properties");

          process_properties(x);

    - topic: ${devicename}/stat
      then:
        lambda: |-
          process_stat(x);



output:
- platform: gpio
  pin: D1
  id: clockwise_pin
- platform: esp8266_pwm  # or ledc if on ESP32
  pin: D2
  id: speed_pin
  frequency: 2khz
- platform: gpio
  pin: D3
  id: counter_clockwise_pin
  # Power on led
# - platform: esp8266_pwm
#   id: pwr_led
#   pin: D4

# light: 
# - platform: monochromatic
#   name: "Power led"
#   output: pwr_led

# # In some call:
# # Set to forward dir
# - output.turn_on: direction_pin
# # Turn on motor
# - output.set_level:
#     id: speed_pin
#     level: 100%
# # Let motor drive for a big
# - delay: 1s
# # Turn off motor
# - output.turn_off: speed_pin
# # Repeat for Oóther direction, this time with turning off the direction pin

# status_led:
#   pin: D4
#   id: statusled

# Example configuration entry
spi:
  miso_pin: D6
  clk_pin: D5

sensor:
  # two housekeeping software sensors
  - platform: wifi_signal
    name: "wifi_signal"
    update_interval: 60s

  - platform: uptime
    name: uptime

    # The temperature sensor
  - platform: max6675
    name: "probe_1"
    cs_pin: D8
    update_interval: 15s
    filters:
      - lambda: return adjust_raw_temp((float)x);
      # - lambda: return x * (9.0/5.0) + 32.0;
    unit_of_measurement: "°F"    
    on_value:
      lambda: |-
        process_temp_received((float)x, false);
